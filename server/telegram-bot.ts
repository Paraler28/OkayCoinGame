=== server/telegram-bot.ts ===
import TelegramBot from 'node-telegram-bot-api';
import { storage } from './storage';
import type { User } from '@shared/schema';

const token = process.env.TELEGRAM_BOT_TOKEN!;
const bot = new TelegramBot(token, { polling: true });

// Store Telegram user mappings
const telegramUserMap = new Map<number, number>(); // telegramId -> userId

export function initTelegramBot() {
  console.log('ü§ñ Telegram bot starting...');
  
  // Handle polling errors
  bot.on('polling_error', (error) => {
    console.log('Telegram polling error:', error);
  });

  // Command: /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramUser = msg.from;
    
    if (!telegramUser) return;

    try {
      // Check if user already exists
      let user = await getUserByTelegramId(telegramUser.id);
      
      if (!user) {
        // Create new user
        const username = telegramUser.username || `user${telegramUser.id}`;
        user = await storage.createUser({ username });
        telegramUserMap.set(telegramUser.id, user.id);
      }

      await bot.sendMessage(chatId, `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OK Coin!

üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç
‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy}/${user.maxEnergy}
üèÜ –£—Ä–æ–≤–µ–Ω—å: ${user.level}

–ö–æ–º–∞–Ω–¥—ã:
üíé /tap - –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã (—Å—Ç–æ–∏—Ç 1 —ç–Ω–µ—Ä–≥–∏—é)
üí∞ /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
üë• /referral - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
üèÜ /leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤`, {
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üéÆ –ò–≥—Ä–∞—Ç—å OK Coin',
              callback_data: 'play_game'
            }
          ]]
        }
      });
    } catch (error) {
      console.error('Error in /start command:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Command: /tap
  bot.onText(/\/tap/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramUser = msg.from;
    
    if (!telegramUser) return;

    try {
      const user = await getUserByTelegramId(telegramUser.id);
      
      if (!user) {
        await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
        return;
      }

      // Update energy first
      await storage.updateEnergy(user.id);
      const updatedUser = await storage.getUser(user.id);

      if (!updatedUser || updatedUser.energy <= 0) {
        await bot.sendMessage(chatId, `‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!

–¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${updatedUser?.energy || 0}/${updatedUser?.maxEnergy || 1000}
üí° –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ 1 –≤ —Å–µ–∫—É–Ω–¥—É`);
        return;
      }

      // Tap coin
      const tappedUser = await storage.tapCoin(user.id);
      
      if (tappedUser) {
        await bot.sendMessage(chatId, `üí∞ +${tappedUser.coinsPerTap} –º–æ–Ω–µ—Ç!

üíé –ë–∞–ª–∞–Ω—Å: ${tappedUser.coins} –º–æ–Ω–µ—Ç
‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${tappedUser.energy}/${tappedUser.maxEnergy}
üìä –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: ${tappedUser.totalTaps}`);
      } else {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } catch (error) {
      console.error('Error in /tap command:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç.');
    }
  });

  // Command: /balance
  bot.onText(/\/balance/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramUser = msg.from;
    
    if (!telegramUser) return;

    try {
      const user = await getUserByTelegramId(telegramUser.id);
      
      if (!user) {
        await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
        return;
      }

      // Update energy before showing balance
      await storage.updateEnergy(user.id);
      const updatedUser = await storage.getUser(user.id);

      await bot.sendMessage(chatId, `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${updatedUser?.coins || 0} –º–æ–Ω–µ—Ç
‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${updatedUser?.energy || 0}/${updatedUser?.maxEnergy || 1000}
üìä –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: ${updatedUser?.totalTaps || 0}
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${updatedUser?.referralCount || 0}`);
    } catch (error) {
      console.error('Error in /balance command:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.');
    }
  });

  // Command: /referral
  bot.onText(/\/referral/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramUser = msg.from;
    
    if (!telegramUser) return;

    try {
      const user = await getUserByTelegramId(telegramUser.id);
      
      if (!user) {
        await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
        return;
      }

      const referralLink = `https://t.me/CryptoOkayBot?start=ref${user.id}`;

      await bot.sendMessage(chatId, `üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
${referralLink}

üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +1000 –º–æ–Ω–µ—Ç
üéÅ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: +500 –º–æ–Ω–µ—Ç
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.referralCount} –¥—Ä—É–∑–µ–π
üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.referralEarnings} –º–æ–Ω–µ—Ç`, {
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
              switch_inline_query: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ OK Coin! üéÆ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã –Ω–∞–∂–∏–º–∞—è OK! ${referralLink}`
            }
          ]]
        }
      });
    } catch (error) {
      console.error('Error in /referral command:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.');
    }
  });

  // Command: /leaderboard
  bot.onText(/\/leaderboard/, async (msg) => {
    const chatId = msg.chat.id;

    try {
      const leaderboard = await storage.getLeaderboard(10);
      
      let message = 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n';
      
      if (leaderboard.length === 0) {
        message += '–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!';
      } else {
        leaderboard.forEach((user, index) => {
          const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
          message += `${medal} ${user.username} - ${user.coins.toLocaleString()} –º–æ–Ω–µ—Ç\n`;
        });
      }

      await bot.sendMessage(chatId, message);
    } catch (error) {
      console.error('Error in /leaderboard command:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.');
    }
  });

  // Handle callback queries (button presses)
  bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;
    const telegramUser = callbackQuery.from;
    
    if (!msg || !telegramUser) return;
    
    const chatId = msg.chat.id;
    
    try {
      if (data === 'play_game') {
        const user = await getUserByTelegramId(telegramUser.id);
        if (!user) {
          await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
          return;
        }
        
        // Update energy
        await storage.updateEnergy(user.id);
        const updatedUser = await storage.getUser(user.id);
        
        await bot.sendMessage(chatId, `üéÆ OK Coin - –ò–≥—Ä–æ–≤–∞—è –ø–∞–Ω–µ–ª—å

üí∞ –ë–∞–ª–∞–Ω—Å: ${updatedUser?.coins || 0} –º–æ–Ω–µ—Ç
‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${updatedUser?.energy || 0}/${updatedUser?.maxEnergy || 1000}
üèÜ –£—Ä–æ–≤–µ–Ω—å: ${updatedUser?.level || 1}
üìä –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: ${updatedUser?.totalTaps || 0}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É OK —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã!`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ OK (+1 –º–æ–Ω–µ—Ç–∞)', callback_data: 'tap_coin' }],
              [
                { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'show_balance' },
                { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'show_referrals' }
              ],
              [
                { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'show_tasks' },
                { text: 'üèÜ –õ–∏–¥–µ—Ä—ã', callback_data: 'show_leaderboard' }
              ],
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'play_game' }]
            ]
          }
        });
      }
      
      else if (data === 'tap_coin') {
        const user = await getUserByTelegramId(telegramUser.id);
        if (!user) return;
        
        // Update energy first
        await storage.updateEnergy(user.id);
        const currentUser = await storage.getUser(user.id);
        
        if (!currentUser || currentUser.energy <= 0) {
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: `‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! (${currentUser?.energy || 0}/${currentUser?.maxEnergy || 1000})`,
            show_alert: true
          });
          return;
        }
        
        // Tap coin
        const tappedUser = await storage.tapCoin(user.id);
        
        if (tappedUser) {
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: `üí∞ +${tappedUser.coinsPerTap} –º–æ–Ω–µ—Ç!`,
            show_alert: false
          });
          
          // Update the message
          await bot.editMessageText(`üéÆ OK Coin - –ò–≥—Ä–æ–≤–∞—è –ø–∞–Ω–µ–ª—å

üí∞ –ë–∞–ª–∞–Ω—Å: ${tappedUser.coins} –º–æ–Ω–µ—Ç
‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${tappedUser.energy}/${tappedUser.maxEnergy}
üèÜ –£—Ä–æ–≤–µ–Ω—å: ${tappedUser.level}
üìä –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: ${tappedUser.totalTaps}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É OK —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã!`, {
            chat_id: chatId,
            message_id: msg.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ OK (+1 –º–æ–Ω–µ—Ç–∞)', callback_data: 'tap_coin' }],
                [
                  { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'show_balance' },
                  { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'show_referrals' }
                ],
                [
                  { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'show_tasks' },
                  { text: 'üèÜ –õ–∏–¥–µ—Ä—ã', callback_data: 'show_leaderboard' }
                ],
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'play_game' }]
              ]
            }
          });
        }
      }
      
      else if (data === 'show_balance') {
        const user = await getUserByTelegramId(telegramUser.id);
        if (!user) return;
        
        await storage.updateEnergy(user.id);
        const updatedUser = await storage.getUser(user.id);
        
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: `üí∞ ${updatedUser?.coins || 0} –º–æ–Ω–µ—Ç | ‚ö° ${updatedUser?.energy || 0}/${updatedUser?.maxEnergy || 1000} —ç–Ω–µ—Ä–≥–∏–∏`,
          show_alert: true
        });
      }
    } catch (error) {
      console.error('Callback query error:', error);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        show_alert: true
      });
    }
  });

  console.log('‚úÖ Telegram bot initialized successfully!');
}

async function getUserByTelegramId(telegramId: number): Promise<User | undefined> {
  const userId = telegramUserMap.get(telegramId);
  if (userId) {
    return await storage.getUser(userId);
  }
  return undefined;
}
